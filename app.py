
import streamlit as st
import pandas as pd
import re
from modules.geocode import geocode_address
from modules.dadata_api import CadastralProcessor

st.set_page_config(layout="wide")
st.title("–ö–æ–Ω—Ç—Ä–æ–ª—å –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤ | –ú–û–°–≠–ù–ï–†–ì–û–°–ë–´–¢")

def is_probable_address(value):
    if not isinstance(value, str):
        return False
    if any(x in value.lower() for x in ["—É–ª", "—É–ª–∏—Ü–∞", "–ø—Ä–æ—Å–ø", "–≥.", "–≥–æ—Ä–æ–¥", "–¥.", "–¥–æ–º", "—Ä-–Ω"]):
        return True
    return False

def is_kad_number(value):
    return isinstance(value, str) and bool(re.match(r"^\d{2}:\d{2}:\d{6,7}:\d+$", value))

uploaded_file = st.file_uploader("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", type=["xlsx"])
if uploaded_file:
    df = pd.read_excel(uploaded_file)
    st.subheader("üìã –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    st.dataframe(df)

    address_column = None
    for col in df.columns:
        sample = df[col].dropna().astype(str).head(50)
        score = sum([is_probable_address(v) or is_kad_number(v) for v in sample])
        if score / len(sample) > 0.3:
            address_column = col
            break

    if not address_column:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü —Å –∞–¥—Ä–µ—Å–∞–º–∏.")
    else:
        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü —Å –∞–¥—Ä–µ—Å–∞–º–∏: **{address_column}**")

        df["is_kadastr"] = df[address_column].apply(is_kad_number)
        df["is_address"] = df[address_column].apply(is_probable_address)
        df["status"] = df.apply(lambda row: "–∫–∞–¥–∞—Å—Ç—Ä" if row["is_kadastr"] else (
            "–∞–¥—Ä–µ—Å" if row["is_address"] else "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π"), axis=1)

        st.subheader("üü¢ –í–∞–ª–∏–¥–Ω—ã–µ –∞–¥—Ä–µ—Å–∞")
        valid_df = df[df["status"] == "–∞–¥—Ä–µ—Å"]
        st.dataframe(valid_df)

        st.subheader("üü° –ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞")
        st.dataframe(df[df["status"] == "–∫–∞–¥–∞—Å—Ç—Ä"])

        st.subheader("üî¥ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏")
        st.dataframe(df[df["status"] == "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π"])

        st.subheader("‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è")
        col1, col2, col3 = st.columns(3)
        run_geocode = False
        convert_kadastr = False
        with col1:
            if st.button("üìç –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –∞–¥—Ä–µ—Å–∞"):
                run_geocode = True
        with col2:
            st.button("üß† –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫")
        with col3:
            if st.button("üì¨ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞"):
                convert_kadastr = True

        if convert_kadastr:
            st.info("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤...")
            processor = CadastralProcessor()
            df = processor.process_dataframe(df, address_column)
            st.success(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processor.stats['total']}, —É—Å–ø–µ—à–Ω–æ ‚Äî {processor.stats['success']}, –æ—à–∏–±–æ–∫ ‚Äî {processor.stats['errors']}")
            st.subheader("üìã –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:")
            st.dataframe(df[[address_column]])

        if run_geocode:
            st.info("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            coords = []
            for index, row in valid_df.iterrows():
                addr = row[address_column]
                lat, lon = geocode_address(addr)
                coords.append((lat, lon))
            valid_df["lat"] = [c[0] for c in coords]
            valid_df["lon"] = [c[1] for c in coords]

            st.success("‚úÖ –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            valid_coords = valid_df.dropna(subset=["lat", "lon"])
            st.subheader("üó∫Ô∏è –ö–∞—Ä—Ç–∞ –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤")
            st.map(valid_coords[["lat", "lon"]])
