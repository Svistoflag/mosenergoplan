import streamlit as st
import pandas as pd
import re
import requests
import json
import folium
from modules.geocode import geocode_address
from modules.dadata_api import CadastralProcessor
from streamlit_folium import st_folium

st.set_page_config(layout="wide")
st.title("–ú–û–°–≠–ù–ï–†–ì–û–°–ë–´–¢: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ –∞–¥—Ä–µ—Å–∞–º")

def is_probable_address(value):
    if not isinstance(value, str):
        return False
    value = value.lower()
    return any(word in value for word in ["—É–ª", "—É–ª–∏—Ü–∞", "–ø—Ä–æ—Å–ø", "–≥.", "–≥–æ—Ä–æ–¥", "–¥.", "–¥–æ–º", "—Ä-–Ω", "–ø–æ—Å—ë–ª–æ–∫", "–ø–µ—Ä–µ—É–ª–æ–∫"])

def is_kad_number(value):
    return isinstance(value, str) and bool(re.search(r"\b\d{2,3}[:\s\-_]*\d+[:\s\-_]*\d+[:\s\-_]*\d+\b", value))

def get_route_osrm(coords):
    route_url = "http://router.project-osrm.org/route/v1/driving/"
    coord_str = ";".join([f"{lon},{lat}" for lat, lon in coords])
    response = requests.get(f"{route_url}{coord_str}?overview=full&geometries=geojson")
    if response.status_code == 200:
        return response.json()
    return None

uploaded_file = st.file_uploader("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª", type=["xlsx"])
if uploaded_file:
    df = pd.read_excel(uploaded_file)
    st.subheader("üìã –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    st.dataframe(df)

    address_column = None

    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ç–≤—ë—Ä—Ç—É—é –∫–æ–ª–æ–Ω–∫—É
    if len(df.columns) >= 4:
        fourth_col = df.columns[3]
        sample = df[fourth_col].dropna().astype(str).head(50)
        if sum([is_probable_address(v) for v in sample]) / len(sample) > 0.3:
            address_column = fourth_col

    # –ï—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑
    if not address_column:
        for col in df.columns:
            sample = df[col].dropna().astype(str).head(50)
            score = sum([is_probable_address(v) or is_kad_number(v) for v in sample])
            if score / len(sample) > 0.3:
                address_column = col
                break

    if not address_column:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É —Å –∞–¥—Ä–µ—Å–∞–º–∏.")
    else:
        st.success(f"‚úÖ –û–ø—Ä–µ–¥–µ–ª—ë–Ω —Å—Ç–æ–ª–±–µ—Ü —Å –∞–¥—Ä–µ—Å–∞–º–∏: **{address_column}**")

        df["contains_kadastr"] = df[address_column].apply(is_kad_number)
        kadastr_df = df[df["contains_kadastr"]]

        if st.button("üîÅ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –≤ –∞–¥—Ä–µ—Å–∞"):
            processor = CadastralProcessor()
            df[address_column] = df[address_column].astype(str).apply(processor.replace_cadastr_in_cell)
            st.success(f"‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—à–Ω–æ: {processor.stats['success']}, –û—à–∏–±–∫–∏: {processor.stats['errors']}")

        df["is_address"] = df[address_column].apply(is_probable_address)
        valid_df = df[df["is_address"]]

        st.subheader("üü¢ –í—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏")
        st.dataframe(valid_df[[address_column]])

        st.subheader("üìç –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞")
        start_address = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å—Ç–∞—Ä—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –¢–≤–µ—Ä—Å–∫–∞—è 1)")
        build_route = st.button("üöó –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç")

        if build_route and start_address:
            start_lat, start_lon = geocode_address(start_address)
            if not start_lat or not start_lon:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å.")
            else:
                coords = [(start_lat, start_lon)]
                address_list = []
                for addr in valid_df[address_column]:
                    lat, lon = geocode_address(addr)
                    if lat and lon:
                        coords.append((lat, lon))
                        address_list.append(addr)

                st.info("üß≠ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è...")
                route_data = get_route_osrm(coords)

                if route_data:
                    st.success("‚úÖ –ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω!")
                    route_coords = route_data["routes"][0]["geometry"]["coordinates"]
                    reversed_coords = [(lat, lon) for lon, lat in route_coords]

                    st.subheader("üó∫Ô∏è –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞")
                    fmap = folium.Map(location=reversed_coords[0], zoom_start=12)
                    folium.Marker(reversed_coords[0], tooltip="–°—Ç–∞—Ä—Ç", icon=folium.Icon(color='green')).add_to(fmap)
                    for i, coord in enumerate(reversed_coords[1:], start=1):
                        folium.Marker(coord, tooltip=f"–¢–æ—á–∫–∞ {i}").add_to(fmap)
                    folium.PolyLine(reversed_coords, color="blue", weight=4.5, opacity=0.8).add_to(fmap)
                    st_folium(fmap, width=900, height=500)

                    st.subheader("üì§ –≠–∫—Å–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–∞")
                    geojson_route = {
                        "type": "FeatureCollection",
                        "features": [
                            {
                                "type": "Feature",
                                "geometry": {
                                    "type": "LineString",
                                    "coordinates": route_data["routes"][0]["geometry"]["coordinates"]
                                },
                                "properties": {
                                    "name": "–ú–∞—Ä—à—Ä—É—Ç –ú–û–°–≠–ù–ï–†–ì–û–°–ë–´–¢"
                                }
                            }
                        ]
                    }
                    st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç (GeoJSON)", data=json.dumps(geojson_route), file_name="route.geojson", mime="application/geo+json")
                else:
                    st.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞.")
